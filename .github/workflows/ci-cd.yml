name: GestVenv CI/CD

on:
  push:
    branches: [ master, main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, main, develop ]

jobs:
  # JOB 1: LINTING ET VALIDATION DE CODE
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -e .
      - name: Lint with flake8
        run: |
          flake8 gestvenv tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 gestvenv tests --count --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      - name: Check formatting with black
        run: |
          black --check gestvenv tests
        continue-on-error: true
      - name: Check imports with isort
        run: |
          isort --check-only --profile black gestvenv tests
        continue-on-error: true
      - name: Type checking with mypy
        run: |
          mypy gestvenv --ignore-missing-imports
        continue-on-error: true

  # JOB 2: TESTS SUR DIFF√âRENTES VERSIONS DE PYTHON ET OS
  test:
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
        # python-version: ['3.9', '3.10', '3.12']
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          pip install -e .
      - name: Test with pytest
        run: |
          pytest --cov=gestvenv --cov-report=xml --cov-report=term-missing -v tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # JOB 3: TESTS DE S√âCURIT√â
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]
          pip install -e .
      - name: Run safety check
        run: |
          safety scan
        continue-on-error: true
      - name: Run bandit security check
        run: |
          # Ex√©cuter bandit mais ne pas √©chouer sur les warnings
          bandit -r gestvenv -f json -o bandit-report.json || echo "Bandit termin√© avec des warnings"
          
          # Afficher un r√©sum√© lisible
          echo "=== R√©sum√© des probl√®mes de s√©curit√© ==="
          bandit -r gestvenv -f txt || echo "Voir bandit-report.json pour les d√©tails"
          
          # V√©rifier seulement les probl√®mes critiques (HIGH/HIGH)
          echo "=== V√©rification des probl√®mes critiques ==="
          bandit -r gestvenv -ll -i || echo "Aucun probl√®me critique d√©tect√©"
        continue-on-error: true  # Ne pas faire √©chouer le build sur les warnings
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
          retention-days: 30

  # JOB 4: BUILD DE PACKAGE
  build:
    needs: [test, security]
    paths:
      - 'getsvenv/**.py'
      - '.github/workflows/ci-cd.yml'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # N√©cessaire pour obtenir tous les tags
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools
      - name: Build package
        run: |
          python -m build
      - name: Check package with twine
        run: |
          twine check dist/*
      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  # JOB 5: TESTS D'INSTALLATION
  test-install:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.12']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: Debug - List files
        run: |
          echo "=== Contenu du r√©pertoire dist/ ==="
          python -c "
          import os
          for item in os.listdir('dist'):
              print(f'  {item}')
          "
      
      - name: Install from wheel
        run: |
          python -m pip install --upgrade pip
          python -c "
          import glob
          import subprocess
          import sys
          
          wheels = glob.glob('dist/*.whl')
          if not wheels:
              print('‚ùå Aucun wheel trouv√©')
              sys.exit(1)
          
          wheel = wheels[0]
          print(f'üì¶ Installation: {wheel}')
          
          cmd = [sys.executable, '-m', 'pip', 'install', wheel]
          result = subprocess.run(cmd, capture_output=True, text=True)
          
          print('STDOUT:', result.stdout)
          if result.stderr:
              print('STDERR:', result.stderr)
          
          if result.returncode != 0:
              sys.exit(1)
          
          print('‚úÖ Installation termin√©e')
          "
      
      - name: Test import
        run: |
          python -c "
          try:
              import gestvenv
              print(f'‚úÖ Import r√©ussi - gestvenv v{gestvenv.__version__}')
              
              # Test des imports de modules
              from gestvenv.core import EnvironmentManager
              print('‚úÖ EnvironmentManager import√©')
              
              from gestvenv.services.environment_service import EnvironmentService
              print('‚úÖ EnvironmentService import√©')
              
              from gestvenv.cli import main
              print('‚úÖ CLI import√©')
              
          except Exception as e:
              print(f'‚ùå Erreur: {e}')
              import sys
              import traceback
              traceback.print_exc()
              sys.exit(1)
          "
      
      - name: Test CLI commands
        run: |
          python -c "
          import subprocess
          import sys
          
          # Test via python -m d'abord
          result = subprocess.run([sys.executable, '-m', 'gestvenv.cli', '--version'], 
                                capture_output=True, text=True)
          
          if result.returncode == 0:
              print(f'‚úÖ CLI via python -m: {result.stdout.strip()}')
          else:
              print(f'‚ùå CLI via python -m √©chou√©: {result.stderr}')
              sys.exit(1)
          
          # Test de la commande directe
          result = subprocess.run(['gestvenv', '--version'], 
                                capture_output=True, text=True)
          
          if result.returncode == 0:
              print(f'‚úÖ CLI directe: {result.stdout.strip()}')
          else:
              print(f'‚ö†Ô∏è CLI directe √©chou√©, mais python -m fonctionne')
              print(f'Erreur: {result.stderr}')
          "

  # JOB 6: DOCUMENTATION
  docs:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-minify-plugin mkdocs-macros-plugin mkdocstrings[python]
          pip install -e .
      - name: Build documentation
        run: |
          mkdocs build --strict
      - name: Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          retention-days: 7
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: gestvenv.readthedocs.io  # Optionnel: si vous avez un domaine personnalis√©

  # JOB 7: D√âPLOIEMENT SUR PYPI (SEULEMENT POUR LES TAGS)
  publish-to-pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, security, build, test-install]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/gestvenv
    permissions:
      id-token: write  # IMPORTANT: pour l'authentification trusted publisher
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

  # JOB 8: D√âPLOIEMENT SUR TEST PYPI (POUR LES BRANCHES DE D√âVELOPPEMENT)
  publish-to-testpypi:
    name: Publish to TestPyPI
    if: github.ref == 'refs/heads/master'
    needs: [test, security, build]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/gestvenv
    permissions:
      id-token: write
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

  # JOB 9: CR√âATION DE RELEASE GITHUB
  github-release:
    name: >-
      Create GitHub Release
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [publish-to-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes "Voir le [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) pour les d√©tails."
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  # JOB 10: NOTIFICATION DE SUCC√àS
  notify-success:
    name: Notify Success
    if: always() && (needs.publish-to-pypi.result == 'success' || needs.test.result == 'success')
    needs: [test, build, publish-to-pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        run: |
          echo "‚úÖ Pipeline executed successfully!"
          echo "üì¶ Package: gestvenv"
          echo "üè∑Ô∏è Version: ${{ github.ref_name }}"
          echo "üîó Repository: ${{ github.repository }}"