"""
Interface en ligne de commande compl√®te pour GestVenv v1.1
"""

import sys
import logging
from pathlib import Path
from typing import Optional, List

import click
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

from gestvenv.core.environment_manager import EnvironmentManager
from gestvenv.core.models import ExportFormat, BackendType
from gestvenv.core.exceptions import GestVenvError
from gestvenv.backends.backend_manager import BackendManager
from gestvenv.services.diagnostic_service import DiagnosticService
from gestvenv.services.template_service import TemplateService
from gestvenv.services.migration_service import MigrationService
from gestvenv.services.cache_service import CacheService
from gestvenv.utils.toml_handler import TomlHandler
from gestvenv.utils.path_utils import PathUtils
from gestvenv.__version__ import __version__

console = Console()

def setup_logging(verbose: bool) -> None:
    """Configure le logging selon le niveau de verbosit√©"""
    level = logging.DEBUG if verbose else logging.WARNING
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

def check_critical_dependencies() -> List[str]:
    """V√©rifie la disponibilit√© des d√©pendances critiques"""
    missing = []
    
    try:
        from gestvenv.core.environment_manager import EnvironmentManager
    except ImportError:
        missing.append("EnvironmentManager")
    
    try:
        from gestvenv.utils.toml_handler import TomlHandler
    except ImportError:
        missing.append("TomlHandler")
    
    try:
        from gestvenv.backends.uv_backend import UvBackend
    except ImportError:
        missing.append("UvBackend")
    
    return missing

@click.group(invoke_without_command=True)
@click.version_option(version=__version__, prog_name="gestvenv")
@click.option('--verbose', '-v', is_flag=True, help='Mode verbeux')
@click.option('--offline', is_flag=True, help='Mode hors ligne')
@click.pass_context
def cli(ctx: click.Context, verbose: bool, offline: bool) -> None:
    """üêç GestVenv - Gestionnaire d'environnements virtuels Python moderne"""
    setup_logging(verbose)
    
    # V√©rification des d√©pendances critiques
    missing_deps = check_critical_dependencies()
    if missing_deps and verbose:
        console.print(f"‚ö†Ô∏è Composants manquants: {', '.join(missing_deps)}", style="yellow")
    
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    ctx.obj['offline'] = offline
    ctx.obj['env_manager'] = EnvironmentManager()
    
    if offline:
        ctx.obj['env_manager'].cache_service.set_offline_mode(True)
    
    if ctx.invoked_subcommand is None:
        console.print(Panel.fit(
            f"üêç [bold green]GestVenv v{__version__}[/bold green]\n"
            f"Gestionnaire d'environnements virtuels Python moderne\n\n"
            f"Utilisez [bold cyan]gestvenv --help[/bold cyan] pour voir toutes les commandes",
            title="GestVenv"
        ))

# === COMMANDES ENVIRONNEMENTS ===

@cli.command()
@click.argument('name')
@click.option('--python', help='Version Python √† utiliser')
@click.option('--backend', type=click.Choice(['pip', 'uv', 'auto']), default='auto')
@click.option('--template', help='Template √† utiliser')
@click.option('--packages', help='Packages initiaux (s√©par√©s par des virgules)')
@click.option('--path', help='Chemin personnalis√© pour l\'environnement')
@click.pass_context
def create(ctx: click.Context, name: str, python: Optional[str], backend: str, 
           template: Optional[str], packages: Optional[str], path: Optional[str]) -> None:
    """Cr√©er un nouvel environnement virtuel"""
    env_manager = ctx.obj['env_manager']
    
    try:
        initial_packages = packages.split(',') if packages else None
        custom_path = Path(path) if path else None
        
        with console.status(f"[bold green]Cr√©ation de l'environnement {name}..."):
            result = env_manager.create_environment(
                name=name,
                python_version=python,
                backend=backend if backend != 'auto' else None,
                initial_packages=initial_packages,
                custom_path=custom_path
            )
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{name}[/bold green] cr√©√© avec succ√®s!")
            if result.environment:
                console.print(f"üìÅ Chemin: {result.environment.path}")
                console.print(f"üêç Python: {result.environment.python_version}")
                console.print(f"üîß Backend: {result.environment.backend_type.value}")
                
                if result.environment.packages:
                    console.print(f"üì¶ Packages install√©s: {len(result.environment.packages)}")
            
            for warning in result.warnings:
                console.print(f"‚ö†Ô∏è {warning}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        sys.exit(1)

@cli.command()
@click.argument('file', type=click.Path(exists=True))
@click.argument('name', required=False)
@click.option('--backend', type=click.Choice(['pip', 'uv', 'auto']), default='auto')
@click.option('--groups', help='Groupes de d√©pendances (s√©par√©s par des virgules)')
@click.option('--python', help='Version Python √† utiliser')
@click.pass_context
def create_from_pyproject(ctx: click.Context, file: str, name: Optional[str], 
                         backend: str, groups: Optional[str], python: Optional[str]) -> None:
    """Cr√©er un environnement depuis pyproject.toml"""
    env_manager = ctx.obj['env_manager']
    
    try:
        pyproject_path = Path(file)
        
        # Validation du fichier pyproject.toml
        if not pyproject_path.name == 'pyproject.toml':
            console.print("‚ùå Le fichier doit √™tre un pyproject.toml")
            sys.exit(1)
        
        # Lecture et validation du contenu
        try:
            toml_data = TomlHandler.load(pyproject_path)
            if 'project' not in toml_data:
                console.print("‚ùå Section [project] manquante dans pyproject.toml")
                sys.exit(1)
        except Exception as e:
            console.print(f"‚ùå Erreur lecture pyproject.toml: {e}")
            sys.exit(1)
        
        groups_list = groups.split(',') if groups else None
        
        with console.status(f"[bold green]Cr√©ation depuis {file}..."):
            result = env_manager.create_from_pyproject(
                pyproject_path=pyproject_path,
                env_name=name,
                groups=groups_list,
                backend=backend if backend != 'auto' else None,
                python_version=python
            )
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{result.environment.name}[/bold green] cr√©√© depuis pyproject.toml!")
            console.print(f"üìÅ Chemin: {result.environment.path}")
            console.print(f"üì¶ Packages install√©s: {len(result.environment.packages)}")
            
            if result.environment.pyproject_info:
                console.print(f"üìã Projet: {result.environment.pyproject_info.name} v{result.environment.pyproject_info.version}")
            
            for warning in result.warnings:
                console.print(f"‚ö†Ô∏è {warning}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.option('--active-only', is_flag=True, help='Afficher seulement les environnements actifs')
@click.option('--format', 'output_format', type=click.Choice(['table', 'json']), default='table')
@click.option('--backend', help='Filtrer par backend')
@click.option('--health', help='Filtrer par √©tat de sant√©')
@click.option('--sort', type=click.Choice(['name', 'created', 'used', 'size']), default='used')
@click.pass_context
def list(ctx: click.Context, active_only: bool, output_format: str, 
         backend: Optional[str], health: Optional[str], sort: str) -> None:
    """Lister tous les environnements"""
    env_manager = ctx.obj['env_manager']
    
    try:
        filters = {}
        if active_only:
            filters['active_only'] = True
        if backend:
            filters['backend'] = backend
        if health:
            filters['health'] = health
            
        environments = env_manager.list_environments(**filters)
        
        # Tri
        if sort == 'name':
            environments.sort(key=lambda x: x.name)
        elif sort == 'created':
            environments.sort(key=lambda x: x.created_at or x.last_used, reverse=True)
        elif sort == 'size':
            environments.sort(key=lambda x: len(x.packages), reverse=True)
        # sort == 'used' est d√©j√† le tri par d√©faut
        
        if output_format == 'json':
            import json
            data = [env.to_dict() for env in environments]
            console.print(json.dumps(data, indent=2, default=str))
            return
        
        if not environments:
            console.print("üì≠ Aucun environnement trouv√©")
            return
        
        table = Table(title="üêç Environnements GestVenv")
        table.add_column("Nom", style="cyan", no_wrap=True)
        table.add_column("Python", style="green")
        table.add_column("Backend", style="yellow")
        table.add_column("Packages", justify="right", style="magenta")
        table.add_column("Statut", style="red")
        table.add_column("Taille", justify="right", style="dim")
        table.add_column("Derni√®re utilisation", style="dim")
        
        for env in environments:
            status = "üü¢ Actif" if env.is_active else "‚ö™ Inactif"
            last_used = env.last_used.strftime("%d/%m %H:%M") if env.last_used else "Jamais"
            
            # Calcul taille avec PathUtils
            size_mb = PathUtils.get_size_mb(env.path) if env.path.exists() else 0
            size_str = f"{size_mb:.1f}MB" if size_mb > 0 else "-"
            
            table.add_row(
                env.name,
                env.python_version or "inconnu",
                env.backend_type.value if env.backend_type else "pip",
                str(len(env.packages)),
                status,
                size_str,
                last_used
            )
        
        console.print(table)
        console.print(f"\nüìä Total: {len(environments)} environnements")
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('name')
@click.pass_context
def activate(ctx: click.Context, name: str) -> None:
    """Activer un environnement"""
    env_manager = ctx.obj['env_manager']
    
    try:
        result = env_manager.activate_environment(name)
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{name}[/bold green] activ√©!")
            console.print(f"üîß Commande: [bold]{result.activation_command}[/bold]")
            
            # Affichage des variables d'environnement
            if result.environment_variables:
                console.print("\nüìã Variables d'environnement configur√©es:")
                for key, value in result.environment_variables.items():
                    if key == 'PATH':
                        # Affichage simplifi√© du PATH
                        console.print(f"  {key}={value[:50]}...")
                    else:
                        console.print(f"  {key}={value}")
                        
            console.print("\nüí° Pour utiliser cet environnement dans votre shell:")
            console.print(f"   {result.activation_command}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.pass_context
def deactivate(ctx: click.Context) -> None:
    """D√©sactiver l'environnement actuel"""
    env_manager = ctx.obj['env_manager']
    
    try:
        success = env_manager.deactivate_environment()
        
        if success:
            console.print("‚úÖ Environnement d√©sactiv√©")
        else:
            console.print("‚ö†Ô∏è Aucun environnement actif")
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('name')
@click.option('--force', is_flag=True, help='Forcer la suppression m√™me si actif')
@click.option('--backup', is_flag=True, help='Cr√©er une sauvegarde avant suppression')
@click.pass_context
def delete(ctx: click.Context, name: str, force: bool, backup: bool) -> None:
    """Supprimer un environnement"""
    env_manager = ctx.obj['env_manager']
    
    try:
        # V√©rification existence
        env_info = env_manager.get_environment_info(name)
        if not env_info:
            console.print(f"‚ùå Environnement '{name}' introuvable")
            sys.exit(1)
        
        # Sauvegarde optionnelle
        if backup:
            backup_result = env_manager.export_environment(name, ExportFormat.JSON)
            if backup_result.success:
                console.print(f"üíæ Sauvegarde cr√©√©e: {backup_result.output_path}")
        
        if not force:
            size_mb = PathUtils.get_size_mb(env_info.path)
            console.print(f"üìä Taille: {size_mb:.1f}MB, {len(env_info.packages)} packages")
            
            if not click.confirm(f"√ätes-vous s√ªr de vouloir supprimer l'environnement '{name}' ?"):
                console.print("‚ùå Suppression annul√©e")
                return
        
        with console.status(f"[bold red]Suppression de {name}..."):
            success = env_manager.delete_environment(name, force=force)
        
        if success:
            console.print(f"‚úÖ Environnement [bold red]{name}[/bold red] supprim√©")
        else:
            console.print(f"‚ùå Erreur lors de la suppression")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('name')
@click.pass_context
def info(ctx: click.Context, name: str) -> None:
    """Afficher les informations d√©taill√©es d'un environnement"""
    env_manager = ctx.obj['env_manager']
    
    try:
        env_info = env_manager.get_environment_info(name)
        
        if not env_info:
            console.print(f"‚ùå Environnement '{name}' introuvable")
            sys.exit(1)
        
        # Informations g√©n√©rales
        table = Table(title=f"üìã Environnement '{name}'")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="green")
        
        table.add_row("Nom", env_info.name)
        table.add_row("Chemin", str(env_info.path))
        table.add_row("Python", env_info.python_version or "Inconnu")
        table.add_row("Backend", env_info.backend_type.value if env_info.backend_type else "pip")
        table.add_row("Statut", "üü¢ Actif" if env_info.is_active else "‚ö™ Inactif")
        table.add_row("Sant√©", env_info.health.value if env_info.health else "Inconnu")
        
        # Calcul taille avec PathUtils
        if env_info.path.exists():
            size_mb = PathUtils.get_size_mb(env_info.path)
            table.add_row("Taille", f"{size_mb:.1f} MB")
        
        table.add_row("Cr√©√© le", env_info.created_at.strftime("%d/%m/%Y %H:%M") if env_info.created_at else "Inconnu")
        table.add_row("Modifi√© le", env_info.updated_at.strftime("%d/%m/%Y %H:%M") if env_info.updated_at else "Inconnu")
        table.add_row("Derni√®re utilisation", env_info.last_used.strftime("%d/%m/%Y %H:%M") if env_info.last_used else "Jamais")
        
        if env_info.pyproject_info:
            table.add_row("pyproject.toml", f"‚úÖ {env_info.pyproject_info.name} v{env_info.pyproject_info.version}")
        
        if env_info.lock_file_path:
            table.add_row("Lock file", str(env_info.lock_file_path))
        
        console.print(table)
        
        # Packages install√©s
        if env_info.packages:
            packages_table = Table(title=f"üì¶ Packages ({len(env_info.packages)})")
            packages_table.add_column("Package", style="cyan")
            packages_table.add_column("Version", style="green")
            packages_table.add_column("Source", style="yellow")
            
            for package in sorted(env_info.packages, key=lambda p: p.name):
                packages_table.add_row(
                    package.name, 
                    package.version or "?",
                    package.source or "pypi"
                )
            
            console.print(packages_table)
        
        # Groupes de d√©pendances
        if env_info.dependency_groups:
            console.print(f"\nüîó Groupes de d√©pendances: {', '.join(env_info.dependency_groups.keys())}")
        
        # Statistiques utilisation
        if env_info.path.exists():
            pyproject_files = PathUtils.find_files_by_pattern(env_info.path.parent, "pyproject.toml")
            if pyproject_files:
                console.print(f"\nüìÑ Fichiers pyproject.toml trouv√©s: {len(pyproject_files)}")
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('name')
@click.option('--groups', help='Groupes √† synchroniser (s√©par√©s par des virgules)')
@click.option('--clean', is_flag=True, help='Nettoyer les packages non list√©s')
@click.option('--upgrade', is_flag=True, help='Mettre √† jour les packages existants')
@click.pass_context
def sync(ctx: click.Context, name: str, groups: Optional[str], clean: bool, upgrade: bool) -> None:
    """Synchroniser un environnement avec pyproject.toml"""
    env_manager = ctx.obj['env_manager']
    
    try:
        env_info = env_manager.get_environment_info(name)
        if not env_info:
            console.print(f"‚ùå Environnement '{name}' introuvable")
            sys.exit(1)
        
        if not env_info.pyproject_info:
            console.print("‚ùå Aucun pyproject.toml associ√© √† cet environnement")
            console.print("üí° Cr√©ez l'environnement avec create-from-pyproject")
            sys.exit(1)
        
        with console.status(f"[bold blue]Synchronisation de {name}..."):
            result = env_manager.sync_environment(name)
        
        if result.success:
            console.print(f"‚úÖ Synchronisation de [bold green]{name}[/bold green] r√©ussie!")
            
            if result.packages_added:
                console.print(f"‚ûï Packages ajout√©s: {', '.join(result.packages_added)}")
            if result.packages_removed:
                console.print(f"‚ûñ Packages supprim√©s: {', '.join(result.packages_removed)}")
            if result.packages_updated:
                console.print(f"üîÑ Packages mis √† jour: {', '.join(result.packages_updated)}")
            
            for warning in result.warnings:
                console.print(f"‚ö†Ô∏è {warning}")
                
            console.print(f"‚è±Ô∏è Temps d'ex√©cution: {result.execution_time:.2f}s")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('source')
@click.argument('target')
@click.option('--python', help='Version Python diff√©rente pour le clone')
@click.option('--backend', type=click.Choice(['pip', 'uv']), help='Backend diff√©rent pour le clone')
@click.pass_context
def clone(ctx: click.Context, source: str, target: str, python: Optional[str], backend: Optional[str]) -> None:
    """Cloner un environnement existant"""
    env_manager = ctx.obj['env_manager']
    
    try:
        with console.status(f"[bold blue]Clonage de {source} vers {target}..."):
            result = env_manager.clone_environment(source, target)
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{target}[/bold green] clon√© depuis [bold blue]{source}[/bold blue]!")
            console.print(f"üì¶ Packages clon√©s: {len(result.environment.packages)}")
            console.print(f"üìÅ Chemin: {result.environment.path}")
            
            for warning in result.warnings:
                console.print(f"‚ö†Ô∏è {warning}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES PACKAGES ===

@cli.command()
@click.argument('packages', nargs=-1, required=True)
@click.option('--env', help='Environnement cible')
@click.option('--group', help='Installer dans un groupe de d√©pendances')
@click.option('--backend', type=click.Choice(['pip', 'uv']), help='Backend √† utiliser')
@click.option('--editable', '-e', is_flag=True, help='Installation en mode √©ditable')
@click.option('--upgrade', is_flag=True, help='Mettre √† jour si d√©j√† install√©')
@click.pass_context
def install(ctx: click.Context, packages: tuple, env: Optional[str], 
           group: Optional[str], backend: Optional[str], editable: bool, upgrade: bool) -> None:
    """Installer des packages"""
    env_manager = ctx.obj['env_manager']
    
    try:
        # R√©solution environnement
        if not env:
            # Utiliser l'environnement actif ou demander
            active_envs = [e for e in env_manager.list_environments() if e.is_active]
            if len(active_envs) == 1:
                target_env = active_envs[0]
            elif len(active_envs) > 1:
                console.print("‚ùå Plusieurs environnements actifs. Sp√©cifiez --env")
                sys.exit(1)
            else:
                console.print("‚ùå Aucun environnement actif. Sp√©cifiez --env")
                sys.exit(1)
        else:
            target_env = env_manager.get_environment_info(env)
            if not target_env:
                console.print(f"‚ùå Environnement '{env}' introuvable")
                sys.exit(1)
        
        package_list = list(packages)
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"Installation dans {target_env.name}...", total=len(package_list))
            
            success_count = 0
            failed_packages = []
            
            for package in package_list:
                progress.update(task, description=f"Installation de {package}...")
                
                try:
                    result = env_manager.package_service.install_package(
                        target_env, package, 
                        group=group, 
                        backend=backend,
                        editable=editable,
                        upgrade=upgrade
                    )
                    
                    if result.success:
                        success_count += 1
                        progress.console.print(f"‚úÖ {package} install√©")
                    else:
                        failed_packages.append(package)
                        progress.console.print(f"‚ùå √âchec {package}: {result.message}")
                except Exception as e:
                    failed_packages.append(package)
                    progress.console.print(f"‚ùå Erreur {package}: {e}")
                
                progress.advance(task)
        
        # R√©sum√©
        console.print(f"\nüìä R√©sum√©: {success_count}/{len(package_list)} packages install√©s")
        if failed_packages:
            console.print(f"‚ùå √âchecs: {', '.join(failed_packages)}")
        
        # Mise √† jour des m√©tadonn√©es environnement
        if success_count > 0:
            target_env.updated_at = time.time()
            
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.argument('packages', nargs=-1, required=True)
@click.option('--env', help='Environnement cible')
@click.option('--yes', is_flag=True, help='Confirmer automatiquement')
@click.pass_context
def uninstall(ctx: click.Context, packages: tuple, env: Optional[str], yes: bool) -> None:
    """D√©sinstaller des packages"""
    env_manager = ctx.obj['env_manager']
    
    try:
        # R√©solution environnement (m√™me logique que install)
        if not env:
            active_envs = [e for e in env_manager.list_environments() if e.is_active]
            if len(active_envs) == 1:
                target_env = active_envs[0]
            else:
                console.print("‚ùå Sp√©cifiez l'environnement avec --env")
                sys.exit(1)
        else:
            target_env = env_manager.get_environment_info(env)
            if not target_env:
                console.print(f"‚ùå Environnement '{env}' introuvable")
                sys.exit(1)
        
        package_list = list(packages)
        
        # Confirmation
        if not yes:
            console.print(f"üì¶ Packages √† d√©sinstaller de '{target_env.name}': {', '.join(package_list)}")
            if not click.confirm("Continuer ?"):
                console.print("‚ùå D√©sinstallation annul√©e")
                return
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task(f"D√©sinstallation dans {target_env.name}...", total=len(package_list))
            
            success_count = 0
            failed_packages = []
            
            for package in package_list:
                progress.update(task, description=f"D√©sinstallation de {package}...")
                
                try:
                    result = env_manager.package_service.uninstall_package(target_env, package)
                    
                    if result.success:
                        success_count += 1
                        progress.console.print(f"‚úÖ {package} d√©sinstall√©")
                    else:
                        failed_packages.append(package)
                        progress.console.print(f"‚ùå √âchec {package}: {result.message}")
                except Exception as e:
                    failed_packages.append(package)
                    progress.console.print(f"‚ùå Erreur {package}: {e}")
                
                progress.advance(task)
        
        console.print(f"\nüìä R√©sum√©: {success_count}/{len(package_list)} packages d√©sinstall√©s")
        if failed_packages:
            console.print(f"‚ùå √âchecs: {', '.join(failed_packages)}")
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.option('--env', help='Environnement √† mettre √† jour')
@click.option('--all', 'update_all', is_flag=True, help='Mettre √† jour tous les packages')
@click.option('--dry-run', is_flag=True, help='Simulation sans installation')
@click.argument('packages', nargs=-1)
@click.pass_context
def update(ctx: click.Context, env: Optional[str], update_all: bool, dry_run: bool, packages: tuple) -> None:
    """Mettre √† jour des packages"""
    env_manager = ctx.obj['env_manager']
    
    try:
        if not env:
            active_envs = [e for e in env_manager.list_environments() if e.is_active]
            if len(active_envs) == 1:
                target_env = active_envs[0]
            else:
                console.print("‚ùå Sp√©cifiez l'environnement avec --env")
                sys.exit(1)
        else:
            target_env = env_manager.get_environment_info(env)
            if not target_env:
                console.print(f"‚ùå Environnement '{env}' introuvable")
                sys.exit(1)
        
        if dry_run:
            console.print(f"üîç Simulation mise √† jour dans '{target_env.name}'")
        
        with console.status(f"[bold blue]Mise √† jour dans {target_env.name}..."):
            if update_all:
                result = env_manager.package_service.update_all_packages(target_env)
            else:
                package_list = list(packages) if packages else []
                result = env_manager.package_service.update_packages(target_env, package_list)
        
        if result.success:
            console.print(f"‚úÖ Mise √† jour de [bold green]{target_env.name}[/bold green] r√©ussie!")
            if hasattr(result, 'packages_updated') and result.packages_updated:
                console.print(f"üîÑ Packages mis √† jour: {', '.join(result.packages_updated)}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except GestVenvError as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES CACHE ===

@cli.group()
def cache() -> None:
    """Gestion du cache"""
    pass

@cache.command(name='info')
@click.pass_context
def cache_info(ctx: click.Context) -> None:
    """Afficher les informations du cache"""
    env_manager = ctx.obj['env_manager']
    cache_service = env_manager.cache_service
    
    try:
        info = cache_service.get_cache_info()
        
        table = Table(title="üíæ Informations du Cache")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="green")
        
        table.add_row("Statut", "‚úÖ Activ√©" if info.enabled else "‚ùå D√©sactiv√©")
        table.add_row("Taille actuelle", f"{info.current_size_mb:.1f} MB")
        table.add_row("Taille maximale", f"{info.max_size_mb:.1f} MB")
        table.add_row("Utilisation", f"{info.usage_percent:.1f}%")
        table.add_row("Packages en cache", str(info.cached_packages_count))
        table.add_row("Taux de hit", f"{info.hit_rate:.1f}%")
        table.add_row("Localisation", str(info.cache_path))
        
        # Informations suppl√©mentaires avec PathUtils
        if info.cache_path.exists():
            cache_size_actual = PathUtils.get_size_mb(info.cache_path)
            table.add_row("Taille r√©elle", f"{cache_size_actual:.1f} MB")
            
            # Analyse des fichiers
            cache_files = PathUtils.find_files_by_pattern(info.cache_path, "*", max_depth=2)
            table.add_row("Fichiers totaux", str(len(cache_files)))
        
        console.print(table)
        
        # Recommandations
        if info.usage_percent > 90:
            console.print("\n‚ö†Ô∏è Cache presque plein. Consid√©rez un nettoyage: gestvenv cache clean")
        elif info.hit_rate < 50:
            console.print("\nüí° Taux de hit faible. Pr√©-chargez vos packages: gestvenv cache add <packages>")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cache.command(name='add')
@click.argument('packages', nargs=-1, required=True)
@click.option('--platforms', help='Plateformes cibles (s√©par√©es par des virgules)')
@click.option('--python-version', help='Version Python pour le cache')
@click.pass_context
def cache_add(ctx: click.Context, packages: tuple, platforms: Optional[str], python_version: Optional[str]) -> None:
    """Ajouter des packages au cache"""
    env_manager = ctx.obj['env_manager']
    cache_service = env_manager.cache_service
    
    try:
        package_list = list(packages)
        platforms_list = platforms.split(',') if platforms else None
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Mise en cache des packages...", total=len(package_list))
            
            success_count = 0
            total_size = 0
            
            for package in package_list:
                progress.update(task, description=f"Mise en cache de {package}...")
                
                try:
                    result = cache_service.add_package_to_cache(
                        package, 
                        platforms=platforms_list,
                        python_version=python_version
                    )
                    
                    if result.success:
                        success_count += 1
                        total_size += getattr(result, 'file_size', 0)
                        progress.console.print(f"‚úÖ {package} mis en cache")
                    else:
                        progress.console.print(f"‚ùå √âchec mise en cache de {package}")
                except Exception as e:
                    progress.console.print(f"‚ùå Erreur {package}: {e}")
                
                progress.advance(task)
        
        console.print(f"\nüìä {success_count}/{len(package_list)} packages mis en cache")
        if total_size > 0:
            console.print(f"üíæ Taille ajout√©e: {total_size / (1024*1024):.1f} MB")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cache.command(name='clean')
@click.option('--older-than', type=int, help='Nettoyer les √©l√©ments plus anciens que X jours')
@click.option('--size-limit', help='Nettoyer pour atteindre cette taille max (ex: 500MB)')
@click.option('--force', is_flag=True, help='Forcer le nettoyage sans confirmation')
@click.pass_context
def cache_clean(ctx: click.Context, older_than: Optional[int], size_limit: Optional[str], force: bool) -> None:
    """Nettoyer le cache"""
    env_manager = ctx.obj['env_manager']
    cache_service = env_manager.cache_service
    
    try:
        # Informations avant nettoyage
        info_before = cache_service.get_cache_info()
        
        if not force:
            console.print(f"üìä Cache actuel: {info_before.current_size_mb:.1f} MB")
            if not click.confirm("√ätes-vous s√ªr de vouloir nettoyer le cache ?"):
                console.print("‚ùå Nettoyage annul√©")
                return
        
        with console.status("[bold yellow]Nettoyage du cache..."):
            result = cache_service.clean_cache(
                older_than_days=older_than,
                size_limit=size_limit
            )
        
        console.print(f"‚úÖ Cache nettoy√©: {result.get('freed_mb', 0):.1f} MB lib√©r√©s")
        console.print(f"üóëÔ∏è {result.get('files_deleted', 0)} fichiers supprim√©s")
        
        # Nettoyage des r√©pertoires vides avec PathUtils
        if info_before.cache_path.exists():
            empty_dirs_cleaned = PathUtils.clean_empty_directories(info_before.cache_path)
            if empty_dirs_cleaned > 0:
                console.print(f"üìÅ {empty_dirs_cleaned} r√©pertoires vides supprim√©s")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cache.command(name='export')
@click.argument('output_file')
@click.option('--compress', is_flag=True, help='Compresser l\'archive')
@click.pass_context
def cache_export(ctx: click.Context, output_file: str, compress: bool) -> None:
    """Exporter le cache"""
    env_manager = ctx.obj['env_manager']
    cache_service = env_manager.cache_service
    
    try:
        output_path = Path(output_file)
        
        # V√©rification espace disque
        cache_info = cache_service.get_cache_info()
        
        with console.status(f"[bold blue]Export du cache vers {output_file}..."):
            result = cache_service.export_cache(output_path, compress=compress)
        
        if result.success:
            console.print(f"‚úÖ Cache export√© vers [bold green]{output_path}[/bold green]")
            console.print(f"üì¶ {result.items_exported} √©l√©ments export√©s")
            
            # Taille du fichier export√©
            if output_path.exists():
                export_size = PathUtils.get_size_mb(output_path)
                console.print(f"üíæ Taille export: {export_size:.1f} MB")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES BACKEND ===

@cli.group()
def backend() -> None:
    """Gestion des backends"""
    pass

@backend.command(name='list')
@click.option('--available-only', is_flag=True, help='Afficher seulement les backends disponibles')
@click.pass_context
def backend_list(ctx: click.Context, available_only: bool) -> None:
    """Lister les backends disponibles"""
    env_manager = ctx.obj['env_manager']
    backend_manager = env_manager.backend_manager
    
    try:
        backends_info = []
        
        for backend_name in ['pip', 'uv', 'poetry', 'pdm']:
            try:
                backend = backend_manager.backends.get(backend_name)
                if backend:
                    info = {
                        'name': backend_name,
                        'available': backend.available,
                        'version': getattr(backend, 'version', 'N/A'),
                        'performance_tier': getattr(backend, 'performance_tier', 'Standard'),
                        'capabilities': getattr(backend, 'capabilities', None)
                    }
                    
                    if not available_only or info['available']:
                        backends_info.append(info)
            except Exception:
                if not available_only:
                    backends_info.append({
                        'name': backend_name,
                        'available': False,
                        'version': 'N/A',
                        'performance_tier': 'N/A',
                        'capabilities': None
                    })
        
        table = Table(title="üîß Backends de packages")
        table.add_column("Nom", style="cyan")
        table.add_column("Disponible", style="green")
        table.add_column("Version", style="yellow")
        table.add_column("Performance", style="magenta")
        table.add_column("Fonctionnalit√©s", style="dim")
        
        for backend_info in backends_info:
            available = "‚úÖ" if backend_info['available'] else "‚ùå"
            
            # R√©sum√© des capacit√©s
            caps_summary = ""
            if backend_info['capabilities']:
                caps = []
                if getattr(backend_info['capabilities'], 'supports_lock_files', False):
                    caps.append("lock")
                if getattr(backend_info['capabilities'], 'supports_dependency_groups', False):
                    caps.append("groups")
                if getattr(backend_info['capabilities'], 'supports_parallel_install', False):
                    caps.append("parallel")
                caps_summary = ", ".join(caps)
            
            table.add_row(
                backend_info['name'],
                available,
                backend_info['version'],
                backend_info['performance_tier'],
                caps_summary
            )
        
        console.print(table)
        
        # Backend actuel
        current_backend = env_manager.config_manager.config.preferred_backend
        console.print(f"\nüéØ Backend par d√©faut: [bold green]{current_backend}[/bold green]")
        
        # Recommandations
        uv_available = any(b['name'] == 'uv' and b['available'] for b in backends_info)
        if not uv_available:
            console.print("\nüí° Pour des performances optimales, installez uv: pip install uv")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@backend.command(name='set')
@click.argument('backend_name', type=click.Choice(['pip', 'uv', 'poetry', 'pdm', 'auto']))
@click.option('--global', 'is_global', is_flag=True, help='D√©finir comme backend global')
@click.pass_context
def backend_set(ctx: click.Context, backend_name: str, is_global: bool) -> None:
    """D√©finir le backend par d√©faut"""
    env_manager = ctx.obj['env_manager']
    
    try:
        # V√©rification disponibilit√©
        if backend_name != 'auto':
            backend = env_manager.backend_manager.backends.get(backend_name)
            if not backend or not backend.available:
                console.print(f"‚ùå Backend '{backend_name}' non disponible")
                
                # Suggestions d'installation
                install_commands = {
                    'uv': 'pip install uv',
                    'poetry': 'pip install poetry',
                    'pdm': 'pip install pdm'
                }
                
                if backend_name in install_commands:
                    console.print(f"üí° Pour l'installer: {install_commands[backend_name]}")
                
                sys.exit(1)
        
        # Mise √† jour configuration
        env_manager.config_manager.config.preferred_backend = backend_name
        env_manager.config_manager.save_config()
        
        console.print(f"‚úÖ Backend par d√©faut: [bold green]{backend_name}[/bold green]")
        
        # Informations sur les b√©n√©fices
        if backend_name == 'uv':
            console.print("üöÄ uv offre des performances jusqu'√† 10x sup√©rieures √† pip")
        elif backend_name == 'auto':
            console.print("üéØ S√©lection automatique du backend optimal pour chaque op√©ration")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@backend.command(name='info')
@click.argument('backend_name', required=False)
@click.option('--detailed', is_flag=True, help='Informations d√©taill√©es')
@click.pass_context
def backend_info(ctx: click.Context, backend_name: Optional[str], detailed: bool) -> None:
    """Informations sur un backend"""
    env_manager = ctx.obj['env_manager']
    backend_manager = env_manager.backend_manager
    
    try:
        if not backend_name:
            backend_name = env_manager.config_manager.config.preferred_backend
        
        backend = backend_manager.backends.get(backend_name)
        if not backend:
            console.print(f"‚ùå Backend '{backend_name}' introuvable")
            sys.exit(1)
        
        table = Table(title=f"üîß Backend '{backend_name}'")
        table.add_column("Propri√©t√©", style="cyan")
        table.add_column("Valeur", style="green")
        
        table.add_row("Nom", backend.name)
        table.add_row("Disponible", "‚úÖ Oui" if backend.available else "‚ùå Non")
        table.add_row("Version", getattr(backend, 'version', 'N/A'))
        
        if hasattr(backend, 'executable_path'):
            table.add_row("Ex√©cutable", str(getattr(backend, 'executable_path', 'N/A')))
        
        # Capacit√©s d√©taill√©es
        if detailed and hasattr(backend, 'capabilities'):
            caps = backend.capabilities
            table.add_row("Lock files", "‚úÖ" if caps.supports_lock_files else "‚ùå")
            table.add_row("Groupes d√©pendances", "‚úÖ" if caps.supports_dependency_groups else "‚ùå")
            table.add_row("Installation parall√®le", "‚úÖ" if caps.supports_parallel_install else "‚ùå")
            table.add_row("Mode √©ditable", "‚úÖ" if caps.supports_editable_installs else "‚ùå")
            table.add_row("Workspace", "‚úÖ" if caps.supports_workspace else "‚ùå")
            table.add_row("Sync pyproject", "‚úÖ" if caps.supports_pyproject_sync else "‚ùå")
            
            if caps.supported_formats:
                table.add_row("Formats support√©s", ", ".join(caps.supported_formats))
            
            if caps.max_parallel_jobs:
                table.add_row("Jobs parall√®les max", str(caps.max_parallel_jobs))
        
        console.print(table)
        
        # Performance score
        if hasattr(backend, 'get_performance_score'):
            score = backend.get_performance_score()
            console.print(f"\n‚ö° Score de performance: {score}/10")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES DIAGNOSTIC ===

@cli.command()
@click.argument('name', required=False)
@click.option('--auto-fix', is_flag=True, help='R√©paration automatique')
@click.option('--full', is_flag=True, help='Diagnostic complet avec recommandations')
@click.option('--performance', is_flag=True, help='Focus sur l\'analyse de performance')
@click.pass_context
def doctor(ctx: click.Context, name: Optional[str], auto_fix: bool, full: bool, performance: bool) -> None:
    """Diagnostic et r√©paration"""
    env_manager = ctx.obj['env_manager']
    
    try:
        with console.status("[bold blue]Diagnostic en cours..."):
            if name:
                result = env_manager.doctor_environment(name)
            else:
                result = env_manager.doctor_environment()
        
        # Affichage du statut g√©n√©ral
        status_icons = {
            'healthy': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'unknown': '‚ùì'
        }
        
        status_icon = status_icons.get(result.overall_status.value, '‚ùì')
        status_text = {
            'healthy': '[bold green]Syst√®me en bon √©tat[/bold green]',
            'warning': '[bold yellow]Avertissements d√©tect√©s[/bold yellow]', 
            'error': '[bold red]Probl√®mes critiques d√©tect√©s[/bold red]',
            'unknown': '[bold dim]√âtat ind√©termin√©[/bold dim]'
        }.get(result.overall_status.value, '√âtat inconnu')
        
        console.print(f"{status_icon} {status_text}")
        
        # Affichage des probl√®mes
        if result.issues:
            issues_table = Table(title="üîç Probl√®mes d√©tect√©s")
            issues_table.add_column("Niveau", style="cyan")
            issues_table.add_column("Cat√©gorie", style="yellow")
            issues_table.add_column("Description", style="white")
            issues_table.add_column("R√©parable", style="green")
            
            for issue in result.issues:
                level_emoji = {
                    'error': '‚ùå',
                    'warning': '‚ö†Ô∏è',
                    'info': '‚ÑπÔ∏è'
                }.get(issue.level.value, '‚ùì')
                
                fixable = "‚úÖ" if issue.auto_fixable else "‚ùå"
                
                issues_table.add_row(
                    f"{level_emoji} {issue.level.value}",
                    issue.category,
                    issue.description,
                    fixable
                )
            
            console.print(issues_table)
        
        # Suggestions d'optimisation
        if result.recommendations and (full or performance):
            console.print("\nüí° [bold blue]Suggestions d'optimisation:[/bold blue]")
            for i, rec in enumerate(result.recommendations, 1):
                console.print(f"  {i}. {rec.description}")
                console.print(f"     Commande: [bold]{rec.command}[/bold]")
                if hasattr(rec, 'impact_score'):
                    console.print(f"     Impact: {rec.impact_score}/10")
        
        # Auto-r√©paration
        if auto_fix and result.issues:
            fixable_issues = [issue for issue in result.issues if issue.auto_fixable]
            if fixable_issues:
                console.print(f"\nüîß {len(fixable_issues)} probl√®mes peuvent √™tre r√©par√©s automatiquement")
                
                if click.confirm("Proc√©der √† la r√©paration automatique ?"):
                    with console.status("[bold green]R√©paration automatique..."):
                        fix_result = env_manager.diagnostic_service.auto_fix_issues(fixable_issues)
                    
                    if fix_result:
                        console.print(f"‚úÖ {len(fixable_issues)} probl√®mes r√©par√©s automatiquement")
                    else:
                        console.print("‚ùå √âchec de la r√©paration automatique")
        
        # Informations syst√®me suppl√©mentaires
        if full:
            console.print(f"\nüìä Informations syst√®me:")
            console.print(f"   ‚Ä¢ Environnements totaux: {len(env_manager.list_environments())}")
            
            # Utilisation espace disque
            envs_path = env_manager.config_manager.get_environments_path()
            if envs_path.exists():
                total_size = PathUtils.get_size_mb(envs_path)
                console.print(f"   ‚Ä¢ Espace utilis√©: {total_size:.1f} MB")
        
        console.print(f"\n‚è±Ô∏è Temps d'ex√©cution: {result.execution_time:.2f}s")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES TEMPLATES ===

@cli.group()
def template() -> None:
    """Gestion des templates"""
    pass

@template.command(name='list')
@click.option('--category', help='Filtrer par cat√©gorie')
@click.option('--builtin-only', is_flag=True, help='Afficher seulement les templates int√©gr√©s')
@click.pass_context
def template_list(ctx: click.Context, category: Optional[str], builtin_only: bool) -> None:
    """Lister les templates disponibles"""
    try:
        template_service = TemplateService()
        templates = template_service.list_templates()
        
        # Filtrage
        if category:
            templates = [t for t in templates if t.category.lower() == category.lower()]
        if builtin_only:
            templates = [t for t in templates if t.is_builtin]
        
        if not templates:
            console.print("üì≠ Aucun template trouv√©")
            return
        
        table = Table(title="üìã Templates disponibles")
        table.add_column("Nom", style="cyan")
        table.add_column("Cat√©gorie", style="green")
        table.add_column("Description", style="yellow")
        table.add_column("Type", style="magenta")
        table.add_column("D√©pendances", style="dim")
        
        for tmpl in templates:
            template_type = "üè† Int√©gr√©" if tmpl.is_builtin else "üë§ Utilisateur"
            deps_count = len(getattr(tmpl, 'dependencies', []))
            
            table.add_row(
                tmpl.name,
                tmpl.category,
                tmpl.description,
                template_type,
                f"{deps_count} packages" if deps_count > 0 else "-"
            )
        
        console.print(table)
        
        # Cat√©gories disponibles
        categories = list(set(t.category for t in templates))
        console.print(f"\nüìÇ Cat√©gories: {', '.join(sorted(categories))}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@template.command(name='create')
@click.argument('template_name')
@click.argument('project_name')
@click.option('--author', help='Nom de l\'auteur')
@click.option('--email', help='Email de l\'auteur')
@click.option('--version', default='0.1.0', help='Version initiale')
@click.option('--python-version', help='Version Python requise')
@click.option('--output', help='R√©pertoire de sortie')
@click.pass_context
def template_create(ctx: click.Context, template_name: str, project_name: str,
                   author: Optional[str], email: Optional[str], version: str,
                   python_version: Optional[str], output: Optional[str]) -> None:
    """Cr√©er un projet depuis un template"""
    try:
        template_service = TemplateService()
        
        # Param√®tres du template
        params = {
            'project_name': project_name,
            'package_name': project_name.lower().replace('-', '_'),
            'version': version
        }
        
        if author:
            params['author'] = author
        if email:
            params['email'] = email
        if python_version:
            params['python_version'] = python_version
        
        # Chemin de sortie
        output_path = Path(output) if output else Path.cwd() / project_name
        
        # V√©rification que le r√©pertoire n'existe pas
        if output_path.exists() and any(output_path.iterdir()):
            console.print(f"‚ùå Le r√©pertoire {output_path} existe et n'est pas vide")
            if not click.confirm("Continuer quand m√™me ?"):
                return
        
        with console.status(f"[bold green]Cr√©ation du projet depuis le template {template_name}..."):
            result = template_service.create_from_template(
                template_name=template_name,
                project_name=project_name,
                output_path=output_path,
                **params
            )
        
        if result.success:
            console.print(f"‚úÖ Projet [bold green]{project_name}[/bold green] cr√©√© depuis le template [bold blue]{template_name}[/bold blue]!")
            console.print(f"üìÅ Localisation: {result.output_path}")
            console.print(f"üìÑ {result.files_created} fichiers cr√©√©s")
            
            # Suggestions pour la suite
            console.print(f"\nüí° Prochaines √©tapes:")
            console.print(f"   cd {output_path.name}")
            console.print(f"   gestvenv create-from-pyproject pyproject.toml {project_name}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES EXPORT/IMPORT ===

@cli.command()
@click.argument('name')
@click.argument('output_file', required=False)
@click.option('--format', 'export_format', 
              type=click.Choice(['json', 'requirements', 'pyproject']), 
              default='json')
@click.option('--include-cache', is_flag=True, help='Inclure le cache local')
@click.pass_context
def export(ctx: click.Context, name: str, output_file: Optional[str], 
          export_format: str, include_cache: bool) -> None:
    """Exporter un environnement"""
    env_manager = ctx.obj['env_manager']
    
    try:
        format_enum = ExportFormat(export_format)
        
        with console.status(f"[bold blue]Export de {name}..."):
            result = env_manager.export_environment(name, format_enum)
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{name}[/bold green] export√©!")
            console.print(f"üìÑ Fichier: {result.output_path}")
            console.print(f"üì¶ {result.items_exported} √©l√©ments export√©s")
            
            # Taille du fichier
            if result.output_path.exists():
                file_size = PathUtils.get_size_mb(result.output_path)
                console.print(f"üíæ Taille: {file_size:.1f} MB")
            
            # Copie vers fichier sp√©cifi√© si demand√©
            if output_file:
                import shutil
                target_path = Path(output_file)
                shutil.copy2(result.output_path, target_path)
                console.print(f"üìã Copi√© vers: {target_path}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command(name='import')
@click.argument('source_file', type=click.Path(exists=True))
@click.argument('env_name', required=False)
@click.option('--force', is_flag=True, help='√âcraser l\'environnement existant')
@click.pass_context
def import_env(ctx: click.Context, source_file: str, env_name: Optional[str], force: bool) -> None:
    """Importer un environnement"""
    env_manager = ctx.obj['env_manager']
    
    try:
        source_path = Path(source_file)
        
        # V√©rification format
        if source_path.suffix not in ['.json', '.toml', '.txt']:
            console.print(f"‚ùå Format non support√©: {source_path.suffix}")
            console.print("üí° Formats support√©s: .json, .toml, .txt")
            sys.exit(1)
        
        with console.status(f"[bold blue]Import depuis {source_file}..."):
            result = env_manager.import_environment(source_path, name=env_name, force=force)
        
        if result.success:
            console.print(f"‚úÖ Environnement [bold green]{result.environment.name}[/bold green] import√©!")
            console.print(f"üìÅ Chemin: {result.environment.path}")
            console.print(f"üì¶ Packages: {len(result.environment.packages)}")
        else:
            console.print(f"‚ùå Erreur: {result.message}")
            sys.exit(1)
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES CONFIGURATION ===

@cli.group()
def config() -> None:
    """Gestion de la configuration"""
    pass

@config.command(name='show')
@click.option('--section', help='Section sp√©cifique √† afficher')
@click.option('--format', type=click.Choice(['table', 'json']), default='table')
@click.pass_context
def config_show(ctx: click.Context, section: Optional[str], format: str) -> None:
    """Afficher la configuration"""
    env_manager = ctx.obj['env_manager']
    config_manager = env_manager.config_manager
    
    try:
        config_data = config_manager.get_config_summary()
        
        if format == 'json':
            import json
            filtered_data = {k: v for k, v in config_data.items() 
                           if not section or section.lower() in k.lower()}
            console.print(json.dumps(filtered_data, indent=2, default=str))
            return
        
        table = Table(title="‚öôÔ∏è Configuration GestVenv")
        table.add_column("Param√®tre", style="cyan")
        table.add_column("Valeur", style="green")
        table.add_column("Description", style="dim")
        
        descriptions = {
            'version': 'Version de la configuration',
            'environments_path': 'R√©pertoire des environnements',
            'preferred_backend': 'Backend par d√©faut',
            'python_version': 'Version Python par d√©faut',
            'cache_enabled': 'Cache activ√©',
            'cache_size_mb': 'Taille max du cache',
            'auto_migrate': 'Migration automatique',
            'offline_mode': 'Mode hors ligne'
        }
        
        for key, value in config_data.items():
            if not section or section.lower() in key.lower():
                desc = descriptions.get(key, '')
                table.add_row(
                    key.replace('_', ' ').title(), 
                    str(value), 
                    desc
                )
        
        console.print(table)
        
        # Informations additionnelles
        config_path = config_manager.config_path
        if config_path.exists():
            config_size = PathUtils.get_size_mb(config_path)
            console.print(f"\nüìÑ Fichier config: {config_path} ({config_size*1024:.0f} KB)")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@config.command(name='set')
@click.argument('key')
@click.argument('value')
@click.option('--type', 'value_type', type=click.Choice(['str', 'int', 'bool', 'float']), 
              help='Type de la valeur')
@click.pass_context
def config_set(ctx: click.Context, key: str, value: str, value_type: Optional[str]) -> None:
    """D√©finir une valeur de configuration"""
    env_manager = ctx.obj['env_manager']
    config_manager = env_manager.config_manager
    
    try:
        # Conversion automatique des types ou selon le type sp√©cifi√©
        if value_type == 'bool' or (not value_type and value.lower() in ['true', 'false']):
            converted_value = value.lower() == 'true'
        elif value_type == 'int' or (not value_type and value.isdigit()):
            converted_value = int(value)
        elif value_type == 'float':
            converted_value = float(value)
        else:
            converted_value = value
        
        # Validation cl√©s connues
        valid_keys = [
            'preferred_backend', 'default_python_version', 'auto_migrate',
            'offline_mode', 'cache_enabled', 'cache_size_mb'
        ]
        
        if key not in valid_keys:
            console.print(f"‚ö†Ô∏è Cl√© '{key}' non reconnue")
            console.print(f"üí° Cl√©s valides: {', '.join(valid_keys)}")
            if not click.confirm("Continuer quand m√™me ?"):
                return
        
        # Mise √† jour de la configuration
        config = config_manager.config
        setattr(config, key, converted_value)
        config_manager.save_config()
        
        console.print(f"‚úÖ {key} = [bold green]{converted_value}[/bold green]")
        
        # Suggestions contextuelles
        if key == 'preferred_backend' and converted_value == 'uv':
            console.print("üöÄ Excellent choix! uv offre des performances exceptionnelles")
        elif key == 'cache_enabled' and converted_value:
            console.print("üíæ Cache activ√©. Utilisez 'gestvenv cache add' pour pr√©-charger des packages")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@config.command(name='reset')
@click.option('--backup', is_flag=True, help='Cr√©er une sauvegarde avant reset')
@click.option('--force', is_flag=True, help='Forcer sans confirmation')
@click.pass_context
def config_reset(ctx: click.Context, backup: bool, force: bool) -> None:
    """Remettre la configuration par d√©faut"""
    env_manager = ctx.obj['env_manager']
    config_manager = env_manager.config_manager
    
    try:
        if not force:
            console.print("‚ö†Ô∏è Cela va remettre toute la configuration par d√©faut")
            if not click.confirm("Continuer ?"):
                return
        
        # Sauvegarde optionnelle
        if backup:
            backup_path = config_manager.backup_config()
            if backup_path:
                console.print(f"üíæ Sauvegarde cr√©√©e: {backup_path}")
        
        with console.status("[bold yellow]Reset de la configuration..."):
            success = config_manager.reset_config()
        
        if success:
            console.print("‚úÖ Configuration remise par d√©faut")
        else:
            console.print("‚ùå Erreur lors du reset")
            sys.exit(1)
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

# === COMMANDES UTILITAIRES ===

@cli.command()
@click.argument('req_file', type=click.Path(exists=True))
@click.option('--output', '-o', help='Fichier de sortie')
@click.option('--interactive', is_flag=True, help='Mode interactif pour personnaliser')
@click.pass_context
def convert_to_pyproject(ctx: click.Context, req_file: str, output: Optional[str], interactive: bool) -> None:
    """Convertir requirements.txt vers pyproject.toml"""
    try:
        req_path = Path(req_file)
        output_path = Path(output) if output else req_path.parent / "pyproject.toml"
        
        # V√©rification que requirements.txt existe et n'est pas vide
        if req_path.stat().st_size == 0:
            console.print("‚ùå Le fichier requirements.txt est vide")
            sys.exit(1)
        
        # Mode interactif pour personnalisation
        project_name = None
        author = None
        description = None
        
        if interactive:
            project_name = click.prompt("Nom du projet", default=req_path.parent.name)
            author = click.prompt("Auteur", default="")
            description = click.prompt("Description", default="")
        
        with console.status("[bold blue]Conversion en cours..."):
            # Utilisation TomlHandler pour la conversion
            requirements_content = req_path.read_text(encoding='utf-8')
            dependencies = [line.strip() for line in requirements_content.split('\n') 
                          if line.strip() and not line.startswith('#')]
            
            # Structure pyproject.toml basique
            pyproject_data = {
                'build-system': {
                    'requires': ['setuptools>=61.0', 'wheel'],
                    'build-backend': 'setuptools.build_meta'
                },
                'project': {
                    'name': project_name or req_path.parent.name,
                    'version': '0.1.0',
                    'dependencies': dependencies
                }
            }
            
            if author:
                pyproject_data['project']['authors'] = [{'name': author}]
            if description:
                pyproject_data['project']['description'] = description
            
            # Sauvegarde avec TomlHandler
            TomlHandler.dump(pyproject_data, output_path)
        
        console.print(f"‚úÖ Conversion r√©ussie: [bold green]{output_path}[/bold green]")
        console.print(f"üì¶ {len(dependencies)} d√©pendances converties")
        
        # Suggestions
        console.print(f"\nüí° Cr√©ez maintenant votre environnement:")
        console.print(f"   gestvenv create-from-pyproject {output_path} {project_name or 'myenv'}")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.option('--detailed', is_flag=True, help='Statistiques d√©taill√©es')
@click.option('--format', type=click.Choice(['table', 'json']), default='table')
@click.pass_context
def stats(ctx: click.Context, detailed: bool, format: str) -> None:
    """Afficher les statistiques d'utilisation"""
    env_manager = ctx.obj['env_manager']
    
    try:
        environments = env_manager.list_environments()
        
        # Calculs statistiques
        total_envs = len(environments)
        active_envs = len([env for env in environments if env.is_active])
        total_packages = sum(len(env.packages) for env in environments)
        
        # R√©partition par backend
        backend_counts = {}
        for env in environments:
            backend = env.backend_type.value if env.backend_type else 'pip'
            backend_counts[backend] = backend_counts.get(backend, 0) + 1
        
        # Calcul taille totale avec PathUtils
        total_size_mb = 0
        for env in environments:
            if env.path.exists():
                total_size_mb += PathUtils.get_size_mb(env.path)
        
        stats_data = {
            'total_environments': total_envs,
            'active_environments': active_envs,
            'total_packages': total_packages,
            'total_size_mb': total_size_mb,
            'backend_distribution': backend_counts
        }
        
        if format == 'json':
            import json
            if detailed:
                # Informations d√©taill√©es par environnement
                env_details = []
                for env in environments:
                    size_mb = PathUtils.get_size_mb(env.path) if env.path.exists() else 0
                    env_details.append({
                        'name': env.name,
                        'packages_count': len(env.packages),
                        'size_mb': size_mb,
                        'backend': env.backend_type.value if env.backend_type else 'pip'
                    })
                stats_data['environments'] = env_details
            
            console.print(json.dumps(stats_data, indent=2))
            return
        
        # Affichage tableau
        stats_table = Table(title="üìä Statistiques GestVenv")
        stats_table.add_column("M√©trique", style="cyan")
        stats_table.add_column("Valeur", style="green")
        
        stats_table.add_row("Environnements totaux", str(total_envs))
        stats_table.add_row("Environnements actifs", str(active_envs))
        stats_table.add_row("Packages totaux", str(total_packages))
        stats_table.add_row("Espace utilis√©", f"{total_size_mb:.1f} MB")
        
        # R√©partition par backend
        for backend, count in backend_counts.items():
            stats_table.add_row(f"Environments {backend}", str(count))
        
        console.print(stats_table)
        
        if detailed:
            # Cache statistics
            try:
                cache_info = env_manager.cache_service.get_cache_info()
                console.print(f"\nüíæ Cache: {cache_info.current_size_mb:.1f}/{cache_info.max_size_mb:.1f} MB")
                console.print(f"üì¶ Packages en cache: {cache_info.cached_packages_count}")
                console.print(f"üéØ Taux de hit: {cache_info.hit_rate:.1f}%")
            except:
                pass
            
            # Top environnements par taille
            if environments:
                console.print(f"\nüèÜ Top 5 environnements par taille:")
                sorted_envs = sorted(environments, 
                                   key=lambda e: PathUtils.get_size_mb(e.path) if e.path.exists() else 0, 
                                   reverse=True)[:5]
                for i, env in enumerate(sorted_envs, 1):
                    size = PathUtils.get_size_mb(env.path) if env.path.exists() else 0
                    console.print(f"   {i}. {env.name}: {size:.1f} MB ({len(env.packages)} packages)")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

@cli.command()
@click.option('--orphaned', is_flag=True, help='Nettoyer seulement les environnements orphelins')
@click.option('--all', 'clean_all', is_flag=True, help='Nettoyer tous les environnements')
@click.option('--cache', 'clean_cache', is_flag=True, help='Nettoyer aussi le cache')
@click.option('--force', is_flag=True, help='Forcer sans confirmation')
@click.option('--dry-run', is_flag=True, help='Simulation sans suppression')
@click.pass_context
def cleanup(ctx: click.Context, orphaned: bool, clean_all: bool, clean_cache: bool, 
           force: bool, dry_run: bool) -> None:
    """Nettoyer les environnements et le cache"""
    env_manager = ctx.obj['env_manager']
    
    try:
        if clean_all:
            environments = env_manager.list_environments()
            total_size = sum(PathUtils.get_size_mb(env.path) for env in environments if env.path.exists())
            
            console.print(f"‚ö†Ô∏è Cela supprimera {len(environments)} environnements ({total_size:.1f} MB)")
            
            if not force and not dry_run:
                if not click.confirm("Continuer ?"):
                    console.print("‚ùå Nettoyage annul√©")
                    return
            
            success_count = 0
            
            for env in environments:
                if dry_run:
                    console.print(f"[dry-run] Suppression de {env.name}")
                    success_count += 1
                else:
                    try:
                        env_manager.delete_environment(env.name, force=True)
                        success_count += 1
                        console.print(f"‚úÖ {env.name} supprim√©")
                    except Exception as e:
                        console.print(f"‚ùå Erreur suppression {env.name}: {e}")
            
            console.print(f"üìä {success_count}/{len(environments)} environnements {'seraient supprim√©s' if dry_run else 'supprim√©s'}")
        
        elif orphaned:
            console.print("üîç Recherche d'environnements orphelins...")
            
            envs_path = env_manager.config_manager.get_environments_path()
            if envs_path.exists():
                orphaned_count = 0
                orphaned_size = 0
                
                for env_dir in envs_path.iterdir():
                    if env_dir.is_dir():
                        metadata_path = env_dir / ".gestvenv-metadata.json"
                        if not metadata_path.exists():
                            size_mb = PathUtils.get_size_mb(env_dir)
                            orphaned_size += size_mb
                            
                            if dry_run:
                                console.print(f"[dry-run] Environnement orphelin: {env_dir.name} ({size_mb:.1f} MB)")
                                orphaned_count += 1
                            else:
                                if not force:
                                    if click.confirm(f"Supprimer l'environnement orphelin '{env_dir.name}' ({size_mb:.1f} MB) ?"):
                                        if PathUtils.safe_remove_directory(env_dir):
                                            orphaned_count += 1
                                            console.print(f"‚úÖ {env_dir.name} supprim√©")
                                else:
                                    if PathUtils.safe_remove_directory(env_dir):
                                        orphaned_count += 1
                                        console.print(f"‚úÖ {env_dir.name} supprim√©")
                
                console.print(f"üìä {orphaned_count} environnements orphelins {'seraient supprim√©s' if dry_run else 'supprim√©s'} ({orphaned_size:.1f} MB)")
        
        # Nettoyage cache
        if clean_cache:
            if dry_run:
                console.print("[dry-run] Nettoyage du cache")
            else:
                cache_result = env_manager.cache_service.clean_cache()
                console.print(f"üíæ Cache nettoy√©: {cache_result.get('freed_mb', 0):.1f} MB lib√©r√©s")
        
        # Nettoyage r√©pertoires vides
        if not dry_run and not orphaned and not clean_all:
            envs_path = env_manager.config_manager.get_environments_path()
            if envs_path.exists():
                empty_dirs = PathUtils.clean_empty_directories(envs_path)
                if empty_dirs > 0:
                    console.print(f"üìÅ {empty_dirs} r√©pertoires vides supprim√©s")
        
        if not orphaned and not clean_all and not clean_cache:
            console.print("‚ùå Sp√©cifiez --orphaned, --all, ou --cache")
            console.print("üí° Utilisez --dry-run pour simuler")
        
    except Exception as e:
        console.print(f"‚ùå Erreur: {e}")
        sys.exit(1)

def main() -> None:
    """Point d'entr√©e principal"""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n‚ö†Ô∏è Op√©ration annul√©e")
        sys.exit(130)
    except Exception as e:
        console.print(f"üí• Erreur inattendue: {e}")
        if '--verbose' in sys.argv:
            import traceback
            console.print(traceback.format_exc())
        sys.exit(1)

if __name__ == '__main__':
    main()